// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostics.proto

#ifndef PROTOBUF_INCLUDED_diagnostics_2eproto
#define PROTOBUF_INCLUDED_diagnostics_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diagnostics_2eproto 

namespace protobuf_diagnostics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diagnostics_2eproto
class DiagnosticsMessage;
class DiagnosticsMessageDefaultTypeInternal;
extern DiagnosticsMessageDefaultTypeInternal _DiagnosticsMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::DiagnosticsMessage* Arena::CreateMaybeMessage<::DiagnosticsMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum DiagnosticsMessage_Status {
  DiagnosticsMessage_Status_OK = 0,
  DiagnosticsMessage_Status_WARNING = 1,
  DiagnosticsMessage_Status_ERROR = 2,
  DiagnosticsMessage_Status_DiagnosticsMessage_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DiagnosticsMessage_Status_DiagnosticsMessage_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DiagnosticsMessage_Status_IsValid(int value);
const DiagnosticsMessage_Status DiagnosticsMessage_Status_Status_MIN = DiagnosticsMessage_Status_OK;
const DiagnosticsMessage_Status DiagnosticsMessage_Status_Status_MAX = DiagnosticsMessage_Status_ERROR;
const int DiagnosticsMessage_Status_Status_ARRAYSIZE = DiagnosticsMessage_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* DiagnosticsMessage_Status_descriptor();
inline const ::std::string& DiagnosticsMessage_Status_Name(DiagnosticsMessage_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    DiagnosticsMessage_Status_descriptor(), value);
}
inline bool DiagnosticsMessage_Status_Parse(
    const ::std::string& name, DiagnosticsMessage_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DiagnosticsMessage_Status>(
    DiagnosticsMessage_Status_descriptor(), name, value);
}
// ===================================================================

class DiagnosticsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DiagnosticsMessage) */ {
 public:
  DiagnosticsMessage();
  virtual ~DiagnosticsMessage();

  DiagnosticsMessage(const DiagnosticsMessage& from);

  inline DiagnosticsMessage& operator=(const DiagnosticsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticsMessage(DiagnosticsMessage&& from) noexcept
    : DiagnosticsMessage() {
    *this = ::std::move(from);
  }

  inline DiagnosticsMessage& operator=(DiagnosticsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticsMessage* internal_default_instance() {
    return reinterpret_cast<const DiagnosticsMessage*>(
               &_DiagnosticsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DiagnosticsMessage* other);
  friend void swap(DiagnosticsMessage& a, DiagnosticsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticsMessage* New() const final {
    return CreateMaybeMessage<DiagnosticsMessage>(NULL);
  }

  DiagnosticsMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticsMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticsMessage& from);
  void MergeFrom(const DiagnosticsMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DiagnosticsMessage_Status Status;
  static const Status OK =
    DiagnosticsMessage_Status_OK;
  static const Status WARNING =
    DiagnosticsMessage_Status_WARNING;
  static const Status ERROR =
    DiagnosticsMessage_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return DiagnosticsMessage_Status_IsValid(value);
  }
  static const Status Status_MIN =
    DiagnosticsMessage_Status_Status_MIN;
  static const Status Status_MAX =
    DiagnosticsMessage_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    DiagnosticsMessage_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return DiagnosticsMessage_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return DiagnosticsMessage_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return DiagnosticsMessage_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string component_name = 1;
  void clear_component_name();
  static const int kComponentNameFieldNumber = 1;
  const ::std::string& component_name() const;
  void set_component_name(const ::std::string& value);
  #if LANG_CXX11
  void set_component_name(::std::string&& value);
  #endif
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  ::std::string* mutable_component_name();
  ::std::string* release_component_name();
  void set_allocated_component_name(::std::string* component_name);

  // string error_details = 3;
  void clear_error_details();
  static const int kErrorDetailsFieldNumber = 3;
  const ::std::string& error_details() const;
  void set_error_details(const ::std::string& value);
  #if LANG_CXX11
  void set_error_details(::std::string&& value);
  #endif
  void set_error_details(const char* value);
  void set_error_details(const char* value, size_t size);
  ::std::string* mutable_error_details();
  ::std::string* release_error_details();
  void set_allocated_error_details(::std::string* error_details);

  // int64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .DiagnosticsMessage.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::DiagnosticsMessage_Status status() const;
  void set_status(::DiagnosticsMessage_Status value);

  // @@protoc_insertion_point(class_scope:DiagnosticsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr component_name_;
  ::google::protobuf::internal::ArenaStringPtr error_details_;
  ::google::protobuf::int64 timestamp_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diagnostics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiagnosticsMessage

// string component_name = 1;
inline void DiagnosticsMessage::clear_component_name() {
  component_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnosticsMessage::component_name() const {
  // @@protoc_insertion_point(field_get:DiagnosticsMessage.component_name)
  return component_name_.GetNoArena();
}
inline void DiagnosticsMessage::set_component_name(const ::std::string& value) {
  
  component_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DiagnosticsMessage.component_name)
}
#if LANG_CXX11
inline void DiagnosticsMessage::set_component_name(::std::string&& value) {
  
  component_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DiagnosticsMessage.component_name)
}
#endif
inline void DiagnosticsMessage::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  component_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DiagnosticsMessage.component_name)
}
inline void DiagnosticsMessage::set_component_name(const char* value, size_t size) {
  
  component_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DiagnosticsMessage.component_name)
}
inline ::std::string* DiagnosticsMessage::mutable_component_name() {
  
  // @@protoc_insertion_point(field_mutable:DiagnosticsMessage.component_name)
  return component_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnosticsMessage::release_component_name() {
  // @@protoc_insertion_point(field_release:DiagnosticsMessage.component_name)
  
  return component_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosticsMessage::set_allocated_component_name(::std::string* component_name) {
  if (component_name != NULL) {
    
  } else {
    
  }
  component_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component_name);
  // @@protoc_insertion_point(field_set_allocated:DiagnosticsMessage.component_name)
}

// .DiagnosticsMessage.Status status = 2;
inline void DiagnosticsMessage::clear_status() {
  status_ = 0;
}
inline ::DiagnosticsMessage_Status DiagnosticsMessage::status() const {
  // @@protoc_insertion_point(field_get:DiagnosticsMessage.status)
  return static_cast< ::DiagnosticsMessage_Status >(status_);
}
inline void DiagnosticsMessage::set_status(::DiagnosticsMessage_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DiagnosticsMessage.status)
}

// string error_details = 3;
inline void DiagnosticsMessage::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnosticsMessage::error_details() const {
  // @@protoc_insertion_point(field_get:DiagnosticsMessage.error_details)
  return error_details_.GetNoArena();
}
inline void DiagnosticsMessage::set_error_details(const ::std::string& value) {
  
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DiagnosticsMessage.error_details)
}
#if LANG_CXX11
inline void DiagnosticsMessage::set_error_details(::std::string&& value) {
  
  error_details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DiagnosticsMessage.error_details)
}
#endif
inline void DiagnosticsMessage::set_error_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DiagnosticsMessage.error_details)
}
inline void DiagnosticsMessage::set_error_details(const char* value, size_t size) {
  
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DiagnosticsMessage.error_details)
}
inline ::std::string* DiagnosticsMessage::mutable_error_details() {
  
  // @@protoc_insertion_point(field_mutable:DiagnosticsMessage.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnosticsMessage::release_error_details() {
  // @@protoc_insertion_point(field_release:DiagnosticsMessage.error_details)
  
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosticsMessage::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    
  } else {
    
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:DiagnosticsMessage.error_details)
}

// int64 timestamp = 4;
inline void DiagnosticsMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DiagnosticsMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:DiagnosticsMessage.timestamp)
  return timestamp_;
}
inline void DiagnosticsMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:DiagnosticsMessage.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DiagnosticsMessage_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DiagnosticsMessage_Status>() {
  return ::DiagnosticsMessage_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diagnostics_2eproto
